# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Calculator implements Node {
  id: ID!
  display: String!
  operations(where: OperationWhereInput, orderBy: OperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Operation!]
}

type Operation implements Node {
  id: ID!
  valueOne: String!
  valueTwo: String!
  result: String
  operator: String!
  calculator(where: CalculatorWhereInput): Calculator!
}


#
# Other Types
#

type AggregateCalculator {
  count: Int!
}

type AggregateOperation {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type CalculatorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [CalculatorEdge]!
  aggregate: AggregateCalculator!
}

input CalculatorCreateInput {
  display: String!
  operations: OperationCreateManyWithoutCalculatorInput
}

input CalculatorCreateOneWithoutOperationsInput {
  create: CalculatorCreateWithoutOperationsInput
  connect: CalculatorWhereUniqueInput
}

input CalculatorCreateWithoutOperationsInput {
  display: String!
}

"""
An edge in a connection.
"""
type CalculatorEdge {
  """
  The item at the end of the edge.
  """
  node: Calculator!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum CalculatorOrderByInput {
  id_ASC
  id_DESC
  display_ASC
  display_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CalculatorPreviousValues {
  id: ID!
  display: String!
}

type CalculatorSubscriptionPayload {
  mutation: MutationType!
  node: Calculator
  updatedFields: [String!]
  previousValues: CalculatorPreviousValues
}

input CalculatorSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CalculatorSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CalculatorSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CalculatorWhereInput
}

input CalculatorUpdateInput {
  display: String
  operations: OperationUpdateManyWithoutCalculatorInput
}

input CalculatorUpdateOneWithoutOperationsInput {
  create: CalculatorCreateWithoutOperationsInput
  connect: CalculatorWhereUniqueInput
  delete: Boolean
  update: CalculatorUpdateWithoutOperationsDataInput
  upsert: CalculatorUpsertWithoutOperationsInput
}

input CalculatorUpdateWithoutOperationsDataInput {
  display: String
}

input CalculatorUpsertWithoutOperationsInput {
  update: CalculatorUpdateWithoutOperationsDataInput!
  create: CalculatorCreateWithoutOperationsInput!
}

input CalculatorWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [CalculatorWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [CalculatorWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  display: String
  """
  All values that are not equal to given value.
  """
  display_not: String
  """
  All values that are contained in given list.
  """
  display_in: [String!]
  """
  All values that are not contained in given list.
  """
  display_not_in: [String!]
  """
  All values less than the given value.
  """
  display_lt: String
  """
  All values less than or equal the given value.
  """
  display_lte: String
  """
  All values greater than the given value.
  """
  display_gt: String
  """
  All values greater than or equal the given value.
  """
  display_gte: String
  """
  All values containing the given string.
  """
  display_contains: String
  """
  All values not containing the given string.
  """
  display_not_contains: String
  """
  All values starting with the given string.
  """
  display_starts_with: String
  """
  All values not starting with the given string.
  """
  display_not_starts_with: String
  """
  All values ending with the given string.
  """
  display_ends_with: String
  """
  All values not ending with the given string.
  """
  display_not_ends_with: String
  operations_every: OperationWhereInput
  operations_some: OperationWhereInput
  operations_none: OperationWhereInput
}

input CalculatorWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCalculator(data: CalculatorCreateInput!): Calculator!
  createOperation(data: OperationCreateInput!): Operation!
  updateCalculator(data: CalculatorUpdateInput!, where: CalculatorWhereUniqueInput!): Calculator
  updateOperation(data: OperationUpdateInput!, where: OperationWhereUniqueInput!): Operation
  deleteCalculator(where: CalculatorWhereUniqueInput!): Calculator
  deleteOperation(where: OperationWhereUniqueInput!): Operation
  upsertCalculator(where: CalculatorWhereUniqueInput!, create: CalculatorCreateInput!, update: CalculatorUpdateInput!): Calculator!
  upsertOperation(where: OperationWhereUniqueInput!, create: OperationCreateInput!, update: OperationUpdateInput!): Operation!
  updateManyCalculators(data: CalculatorUpdateInput!, where: CalculatorWhereInput!): BatchPayload!
  updateManyOperations(data: OperationUpdateInput!, where: OperationWhereInput!): BatchPayload!
  deleteManyCalculators(where: CalculatorWhereInput!): BatchPayload!
  deleteManyOperations(where: OperationWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
A connection to a list of items.
"""
type OperationConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [OperationEdge]!
  aggregate: AggregateOperation!
}

input OperationCreateInput {
  valueOne: String!
  valueTwo: String!
  result: String
  operator: String!
  calculator: CalculatorCreateOneWithoutOperationsInput!
}

input OperationCreateManyWithoutCalculatorInput {
  create: [OperationCreateWithoutCalculatorInput!]
  connect: [OperationWhereUniqueInput!]
}

input OperationCreateWithoutCalculatorInput {
  valueOne: String!
  valueTwo: String!
  result: String
  operator: String!
}

"""
An edge in a connection.
"""
type OperationEdge {
  """
  The item at the end of the edge.
  """
  node: Operation!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum OperationOrderByInput {
  id_ASC
  id_DESC
  valueOne_ASC
  valueOne_DESC
  valueTwo_ASC
  valueTwo_DESC
  result_ASC
  result_DESC
  operator_ASC
  operator_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type OperationPreviousValues {
  id: ID!
  valueOne: String!
  valueTwo: String!
  result: String
  operator: String!
}

type OperationSubscriptionPayload {
  mutation: MutationType!
  node: Operation
  updatedFields: [String!]
  previousValues: OperationPreviousValues
}

input OperationSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OperationSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OperationSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OperationWhereInput
}

input OperationUpdateInput {
  valueOne: String
  valueTwo: String
  result: String
  operator: String
  calculator: CalculatorUpdateOneWithoutOperationsInput
}

input OperationUpdateManyWithoutCalculatorInput {
  create: [OperationCreateWithoutCalculatorInput!]
  connect: [OperationWhereUniqueInput!]
  disconnect: [OperationWhereUniqueInput!]
  delete: [OperationWhereUniqueInput!]
  update: [OperationUpdateWithWhereUniqueWithoutCalculatorInput!]
  upsert: [OperationUpsertWithWhereUniqueWithoutCalculatorInput!]
}

input OperationUpdateWithoutCalculatorDataInput {
  valueOne: String
  valueTwo: String
  result: String
  operator: String
}

input OperationUpdateWithWhereUniqueWithoutCalculatorInput {
  where: OperationWhereUniqueInput!
  data: OperationUpdateWithoutCalculatorDataInput!
}

input OperationUpsertWithWhereUniqueWithoutCalculatorInput {
  where: OperationWhereUniqueInput!
  update: OperationUpdateWithoutCalculatorDataInput!
  create: OperationCreateWithoutCalculatorInput!
}

input OperationWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [OperationWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [OperationWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  valueOne: String
  """
  All values that are not equal to given value.
  """
  valueOne_not: String
  """
  All values that are contained in given list.
  """
  valueOne_in: [String!]
  """
  All values that are not contained in given list.
  """
  valueOne_not_in: [String!]
  """
  All values less than the given value.
  """
  valueOne_lt: String
  """
  All values less than or equal the given value.
  """
  valueOne_lte: String
  """
  All values greater than the given value.
  """
  valueOne_gt: String
  """
  All values greater than or equal the given value.
  """
  valueOne_gte: String
  """
  All values containing the given string.
  """
  valueOne_contains: String
  """
  All values not containing the given string.
  """
  valueOne_not_contains: String
  """
  All values starting with the given string.
  """
  valueOne_starts_with: String
  """
  All values not starting with the given string.
  """
  valueOne_not_starts_with: String
  """
  All values ending with the given string.
  """
  valueOne_ends_with: String
  """
  All values not ending with the given string.
  """
  valueOne_not_ends_with: String
  valueTwo: String
  """
  All values that are not equal to given value.
  """
  valueTwo_not: String
  """
  All values that are contained in given list.
  """
  valueTwo_in: [String!]
  """
  All values that are not contained in given list.
  """
  valueTwo_not_in: [String!]
  """
  All values less than the given value.
  """
  valueTwo_lt: String
  """
  All values less than or equal the given value.
  """
  valueTwo_lte: String
  """
  All values greater than the given value.
  """
  valueTwo_gt: String
  """
  All values greater than or equal the given value.
  """
  valueTwo_gte: String
  """
  All values containing the given string.
  """
  valueTwo_contains: String
  """
  All values not containing the given string.
  """
  valueTwo_not_contains: String
  """
  All values starting with the given string.
  """
  valueTwo_starts_with: String
  """
  All values not starting with the given string.
  """
  valueTwo_not_starts_with: String
  """
  All values ending with the given string.
  """
  valueTwo_ends_with: String
  """
  All values not ending with the given string.
  """
  valueTwo_not_ends_with: String
  result: String
  """
  All values that are not equal to given value.
  """
  result_not: String
  """
  All values that are contained in given list.
  """
  result_in: [String!]
  """
  All values that are not contained in given list.
  """
  result_not_in: [String!]
  """
  All values less than the given value.
  """
  result_lt: String
  """
  All values less than or equal the given value.
  """
  result_lte: String
  """
  All values greater than the given value.
  """
  result_gt: String
  """
  All values greater than or equal the given value.
  """
  result_gte: String
  """
  All values containing the given string.
  """
  result_contains: String
  """
  All values not containing the given string.
  """
  result_not_contains: String
  """
  All values starting with the given string.
  """
  result_starts_with: String
  """
  All values not starting with the given string.
  """
  result_not_starts_with: String
  """
  All values ending with the given string.
  """
  result_ends_with: String
  """
  All values not ending with the given string.
  """
  result_not_ends_with: String
  operator: String
  """
  All values that are not equal to given value.
  """
  operator_not: String
  """
  All values that are contained in given list.
  """
  operator_in: [String!]
  """
  All values that are not contained in given list.
  """
  operator_not_in: [String!]
  """
  All values less than the given value.
  """
  operator_lt: String
  """
  All values less than or equal the given value.
  """
  operator_lte: String
  """
  All values greater than the given value.
  """
  operator_gt: String
  """
  All values greater than or equal the given value.
  """
  operator_gte: String
  """
  All values containing the given string.
  """
  operator_contains: String
  """
  All values not containing the given string.
  """
  operator_not_contains: String
  """
  All values starting with the given string.
  """
  operator_starts_with: String
  """
  All values not starting with the given string.
  """
  operator_not_starts_with: String
  """
  All values ending with the given string.
  """
  operator_ends_with: String
  """
  All values not ending with the given string.
  """
  operator_not_ends_with: String
  calculator: CalculatorWhereInput
}

input OperationWhereUniqueInput {
  id: ID
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  calculators(where: CalculatorWhereInput, orderBy: CalculatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Calculator]!
  operations(where: OperationWhereInput, orderBy: OperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Operation]!
  calculator(where: CalculatorWhereUniqueInput!): Calculator
  operation(where: OperationWhereUniqueInput!): Operation
  calculatorsConnection(where: CalculatorWhereInput, orderBy: CalculatorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CalculatorConnection!
  operationsConnection(where: OperationWhereInput, orderBy: OperationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OperationConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

type Subscription {
  calculator(where: CalculatorSubscriptionWhereInput): CalculatorSubscriptionPayload
  operation(where: OperationSubscriptionWhereInput): OperationSubscriptionPayload
}
